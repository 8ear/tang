---
name: build-docker
on:
  schedule:
    - cron:  '0 0 * * *'
  workflow_dispatch:
  push:
    branches:
      - 'master'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'master'

jobs:
  docker:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os:
          #- fedora:rawhide
          #- fedora:latest
          #- centos:7
          #- centos:8
          #- debian:testing
          - debian:latest
          - debian:stable-slim
          #- ubuntu:devel
          #- ubuntu:rolling
          #- ubuntu:bionic
          #- ubuntu:focal #20.04 LTS
    env:
      DISTRO: ${{matrix.os}}
      BASE: debian
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      - 
        name: create base image env from docker image
        run: |
          BASE=$(echo ${DISTRO}|cut -d : -f 1) >> .profile
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ github.repository_owner }}/tang
          tags: |
            type=ref,event=branch,suffix=-${{env.BASE}}
            type=ref,event=pr,suffix=-${{env.BASE}}
            type=semver,pattern={{version}},suffix=-${{env.BASE}}
            type=semver,pattern={{major}}.{{minor}},suffix=-${{env.BASE}}
            type=semver,pattern={{major}},suffix=-${{env.BASE}}
            type=schedule,enable=true,priority=1000,prefix=,suffix=-${{env.BASE}},pattern=nightly
          labels: |
            org.opencontainers.image.description=Tang is a server for binding data to network presence.
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            
      -
        name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          #username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          registry: ghcr.io
          username: ${{ github.actor }}
          #password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            DISTRO=${{env.DISTRO}}
   
#      -
#        if: github.event_name != 'pull_request'
#        name: Update repo description
#        uses: peter-evans/dockerhub-description@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_PASSWORD }}
#          repository: user/app

#vim:set ts=2 sw=2 et:
